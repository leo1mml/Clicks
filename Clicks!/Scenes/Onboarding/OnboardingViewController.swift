
//
//  OnboardingViewController.swift
//  Clicks!
//
//  Created by Leonel Menezes on 24/05/2018.
//  Copyright (c) 2018 Leonel Menezes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OnboardingDisplayLogic: class
{
    func setupCollectionView()
    func setupImageView()
    func setupBottomControls()
    func switchImageAnimation(imageIndex: Int)
}

class OnboardingViewController: UICollectionViewController, OnboardingDisplayLogic
{
    
    
    
    //MARK: - Variables
    
    
    
    ///Previous index of the collection view - It is used to define whether or not we should animate the image view
    private var prevIndex: Int = 0
    var presenter: OnboardingPresentationLogic?
    var router: (NSObjectProtocol & OnboardingRoutingLogic & OnboardingDataPassing)?
    
    
    
    //MARK: - Screen Items
    
    
    
    ///Imageview that shows the current onboard image
    let imageView : UIImageView = {
        let imageView = UIImageView()
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.clipsToBounds = true
        imageView.contentMode = .center
        return imageView
    }()
    ///Indicates where is the current page
    private let pageControl : UIPageControl = {
       let pc = UIPageControl()
        pc.currentPage = 0
        pc.numberOfPages = 4
        pc.currentPageIndicatorTintColor = AppColors.clearblack.color
        pc.pageIndicatorTintColor = .gray
        pc.translatesAutoresizingMaskIntoConstraints = false
        return pc
    }()
    ///Button to skip the instructions
    private let rightButton : UIButton = {
        let skipButton = UIButton()
        skipButton.setTitle(NSLocalizedString("SKIP", comment: ""), for: .normal)
        skipButton.setTitleColor(AppColors.clearblack.color, for: .normal)
        skipButton.titleLabel?.font = UIFont(name: "Montserrat-Medium", size: 13)
        skipButton.accessibilityIdentifier = "SKIP BUTTON"
        skipButton.addTarget(self, action: #selector(handleSkip), for: .touchUpInside)
        skipButton.translatesAutoresizingMaskIntoConstraints = false
        return skipButton
    }()
    ///This button does nothing, I used it just to make the stackview work properly.
    private let leftButton : UIButton = {
        let prevButton = UIButton()
        prevButton.translatesAutoresizingMaskIntoConstraints = false
        return prevButton
    }()
    
    
    
    // MARK: - Object lifecycle
    
    
    
    override init(collectionViewLayout layout: UICollectionViewLayout) {
        super.init(collectionViewLayout: layout)
        self.view.accessibilityIdentifier = "Onboarding"
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        return nil
    }
    
    
    
    // MARK: - Setup
    
    
    ///This method binds all the architecture classes together
    private func setup()
    {
        let viewController = self
        let presenter = OnboardingPresenter()
        let router = OnboardingRouter()
        viewController.presenter = presenter
        viewController.router = router
        router.viewController = viewController
        router.dataStore = presenter
    }
    
    
    // MARK: - View lifecycle
    
    
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupCollectionView()
        setupImageView()
        setupBottomControls()
        self.view.backgroundColor = AppColors.darkwhite.color
        UserDefaults.standard.set(true, forKey: "kOnboardingPresented")
    }
    
    override var prefersStatusBarHidden: Bool {
        return true
    }
    
    //MARK: - Actions
    
    
    ///This action is called when you wish to go to another viewcontroller
    @objc func handleSkip() {
        self.router?.skipOnboarding()
    }
    
    
    
    
    
    
    
    // MARK: - SCROLL VIEW
    
    
    
    override func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>) {
        let x = targetContentOffset.pointee.x
        ///gets the current page index from 0 to n-1
        let pageIndex = Int(x/view.frame.width)
        self.pageControl.currentPage = pageIndex
        // Here we jus decide if the animation should happen
        if(self.prevIndex != pageIndex){
            switchImageAnimation(imageIndex: pageIndex + 1)
            prevIndex = pageIndex
        }
        ///If the page index is 3 we show some message, if not we show another.
        if(pageIndex == 3){
            self.rightButton.setTitle(NSLocalizedString("LET'S GO", comment: ""), for: .normal)
        }else {
            self.rightButton.setTitle(NSLocalizedString("SKIP", comment: ""), for: .normal)
        }
    }
    
    
    
    // MARK: - Collection View
    
    
    
    ///Configures the collectionview and changes it to its right size and color.
    func setupCollectionView() {
        collectionView?.backgroundColor = AppColors.darkwhite.color
        collectionView?.isPagingEnabled = true
        collectionView?.showsHorizontalScrollIndicator = false
        //Registers the collection view page cells
        collectionView?.register(PageCell.self, forCellWithReuseIdentifier: "cellID")
        collectionView?.translatesAutoresizingMaskIntoConstraints = false
        collectionView?.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        collectionView?.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        collectionView?.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        collectionView?.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
    }
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 4
    }
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cellID", for: indexPath) as! PageCell
        //Here we ask the interactor to get the data from the models for us.
        presenter?.accessPageData(pageNumber: indexPath.item, completionHandler: { (structure) in
            cell.holders = structure
        })
        
        return cell
    }
    
    ///This method adds constraints to the image view and also sets its initial image
    func setupImageView()  {
        self.view.addSubview(self.imageView)
        self.imageView.topAnchor.constraint(equalTo: self.view.topAnchor).isActive = true
        self.imageView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor).isActive = true
        self.imageView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor).isActive = true
        self.imageView.heightAnchor.constraint(equalTo: self.view.heightAnchor, multiplier: 0.63).isActive = true
        self.imageView.image = UIImage(named: "imageOnboard1")
        self.imageView.image?.accessibilityIdentifier = "imageOnboard1"
    }
    
    ///This method adds constraints to the bottom controls stackview.
    func setupBottomControls() {
        let stackViewBottomControls = UIStackView(arrangedSubviews: [ self.leftButton, self.pageControl, self.rightButton])
        stackViewBottomControls.translatesAutoresizingMaskIntoConstraints = false
        stackViewBottomControls.distribution = .fillEqually
        self.view.addSubview(stackViewBottomControls)
        NSLayoutConstraint.activate([
            stackViewBottomControls.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor),
            stackViewBottomControls.centerXAnchor.constraint(equalTo: self.view.centerXAnchor),
            stackViewBottomControls.trailingAnchor.constraint(equalTo: self.view.trailingAnchor),
            stackViewBottomControls.leadingAnchor.constraint(equalTo: self.view.leadingAnchor)
            ])
    }
    
    
    
    // MARK: - Animations
    
    
    
    /**
     This animates the imageview as it changes the content image
     - Parameters:
     
        - imageIndex: the index of the image to be displayed
     */
    func switchImageAnimation(imageIndex: Int) {
        UIView.animate(withDuration: 0.2, delay: 0, options: .curveLinear, animations: {
            self.imageView.alpha = 0
        }, completion: { finished in
            
            self.imageView.image = UIImage(named: "imageOnboard\(imageIndex)")
            self.imageView.image?.accessibilityIdentifier = "imageOnboard\(imageIndex)"
            
            UIView.animate(withDuration: 0.2, delay: 0, options: .curveLinear, animations: {
                self.imageView.alpha = 1
            }, completion: { finished in })
        })
    }
}

extension OnboardingViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: collectionView.frame.height)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
}
