 
 //
 //  HomeViewController.swift
 //  Clicks!
 //
 //  Created by Leonel Menezes on 24/05/2018.
 //  Copyright (c) 2018 Leonel Menezes. All rights reserved.
 //
 //  This file was generated by the Clean Swift Xcode Templates so
 //  you can apply clean architecture to your iOS and Mac projects,
 //  see http://clean-swift.com
 //
 
 import UIKit
 
 protocol HomeVCInteraction {
    func hideStatusBar()
    func showStatusBar()
    func rotateToPortrait()
    func scrollToIndex(index: Int)
 }
 
 class HomeViewController: UIViewController
 {
    
    // MARK: - Variables
    
    ///last scroll offset value
    private var lastOffset : CGFloat = 0.0
    ///scale proportion per point moved in the scroll
    private var homeImageScaleFactor : CGSize = CGSize(width: 0.0, height: 0.0)
    ///scale proportion per point moved in the scroll
    private var profileImageScaleFactor : CGSize = CGSize(width: 0.0, height: 0.0)
    ///scale proportion per point moved in the scroll
    private var configScaleFactor : CGSize = CGSize(width: 0.0, height: 0.0)
    ///move proportion per point moved in the scroll
    private var moveFactor : CGFloat = 0.0
    ///Transformations max distance
    var maxDistanceTransformations : CGFloat = 0.0
    ///Current profile image scale
    private var profileImageScale : CGSize = CGSize(width: 1.0, height: 1.0)
    ///Current home home scale
    private var homeImageScale : CGSize = CGSize(width: 1.0, height: 1.0)
    ///Current container collection view page index
    private var pageIndex = 0
    ///Main Scren cell id
    private let mainScreenCellId = "MainScreenCell"
    ///Profile screen cell id
    private let profileScreenCellId = "ProfileScreenCell"
    
    private var shouldHideStatusBar = false
    
    //Constraints
    private var homeImageCenterXConstraint : NSLayoutConstraint?
    private var profileImageTrailingConstraint: NSLayoutConstraint?
    private var configImageLeadingConstraint : NSLayoutConstraint?
    
    //CollectionView
    private var containerCollectionView: UICollectionView = {
        let collectionView = UICollectionView(frame: CGRect.zero, collectionViewLayout: HorizontalScrollFlowLayout())
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.bounces = false
        collectionView.isPagingEnabled = true
        collectionView.backgroundColor = AppColors.darkwhite.color
        return collectionView
    }()
    
    //Images
    private var configImage: UIImageView = {
        let image = UIImageView()
        image.translatesAutoresizingMaskIntoConstraints = false
        image.image = UIImage(named: "config-icon")
        return image
    }()
    
    private var profileImage: UIImageView = {
        let image = UIImageView()
        image.translatesAutoresizingMaskIntoConstraints = false
        image.image = UIImage(named: "profile-icon")
        return image
    }()
    private var homeImage: UIImageView = {
        let image = UIImageView()
        image.translatesAutoresizingMaskIntoConstraints = false
        image.image = UIImage(named: "home-icon")
        return image
    }()
    
    // Stack Control
    private var stackControl : UIStackView = {
        let stack = UIStackView()
        stack.alignment = .center
        stack.axis = .horizontal
        stack.distribution = .fillEqually
        stack.translatesAutoresizingMaskIntoConstraints = false
        return stack
    }()
    
    private var leftControl : UIButton = {
        let control = UIButton()
        control.translatesAutoresizingMaskIntoConstraints = false
        return control
    }()
    private var middleControl : UIButton = {
        let control = UIButton()
        control.translatesAutoresizingMaskIntoConstraints = false
        return control
    }()
    private var rightControl : UIButton = {
        let control = UIButton()
        control.translatesAutoresizingMaskIntoConstraints = false
        return control
    }()
    
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.view.backgroundColor = AppColors.darkwhite.color
        setupStack()
        setupCollectionView()
        setupImages()
        self.containerCollectionView.register(MainScreenView.self, forCellWithReuseIdentifier: mainScreenCellId)
        self.containerCollectionView.register(ProfileView.self, forCellWithReuseIdentifier: profileScreenCellId)
        
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.maxDistanceTransformations = self.profileImage.center.x - view.frame.width/2
        setFactors()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        self.containerCollectionView.collectionViewLayout.invalidateLayout()
    }
    
    override var shouldAutorotate: Bool {
        return true
    }
    
    override var prefersStatusBarHidden: Bool {
        return self.shouldHideStatusBar
    }
    override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return .portrait
    }
    
    ///Sets the initial values for the move and scale factors
    func setFactors() {
        self.moveFactor = (maxDistanceTransformations)/view.frame.width
        self.homeImageScaleFactor = getItemScaleRate(distance: view.frame.width, from: homeImage.frame.size, to: CGSize(width: homeImage.frame.width * 0.75, height: homeImage.frame.height * 0.75))
        self.profileImageScaleFactor = getItemScaleRate(distance: view.frame.width, from: profileImage.frame.size, to: CGSize(width: profileImage.frame.width * 1.066, height: profileImage.frame.height * 1.066))
    }
    
    
    // MARK: - UI CONFIGURATION
    
    func setupStack() {
        self.view.addSubview(self.stackControl)
        NSLayoutConstraint.activate([
                self.stackControl.heightAnchor.constraint(equalToConstant: 50),
                self.stackControl.leadingAnchor.constraint(equalTo: self.view.leadingAnchor, constant: 20),
                self.stackControl.trailingAnchor.constraint(equalTo: self.view.trailingAnchor, constant: -20),
                self.stackControl.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor)
            ])
        self.stackControl.addArrangedSubview(self.leftControl)
        self.stackControl.addArrangedSubview(self.middleControl)
        self.stackControl.addArrangedSubview(self.rightControl)
        self.leftControl.addTarget(self, action: #selector(leftButtonAction), for: .touchUpInside)
        self.middleControl.addTarget(self, action: #selector(middleAction), for: .touchUpInside)
        self.rightControl.addTarget(self, action: #selector(rightAction), for: .touchUpInside)
    }
    
    ///Configures the initial position of images
    func setupImages() {
        
        //Home Image
        self.view.addSubview(self.homeImage)
        self.homeImageCenterXConstraint = self.homeImage.centerXAnchor.constraint(equalTo: self.middleControl.centerXAnchor)
        self.homeImage.centerYAnchor.constraint(equalTo: self.middleControl.centerYAnchor).isActive = true
        self.homeImage.widthAnchor.constraint(equalToConstant: view.frame.width * 0.094).isActive = true
        self.homeImage.heightAnchor.constraint(equalToConstant: view.frame.height * 0.06).isActive = true
        self.homeImage.tintColor = AppColors.clearblack.color
        
        //Profile Image
        self.view.addSubview(self.profileImage)
        self.profileImageTrailingConstraint = self.profileImage.trailingAnchor.constraint(equalTo: self.rightControl.trailingAnchor)
        self.profileImage.centerYAnchor.constraint(equalTo: self.rightControl.centerYAnchor).isActive = true
        self.profileImage.widthAnchor.constraint(equalToConstant: view.frame.width * 0.07).isActive = true
        self.profileImage.heightAnchor.constraint(equalToConstant: view.frame.height * 0.045).isActive = true
        self.profileImage.tintColor = AppColors.gray.color
        
        //Config Image
        self.view.addSubview(self.configImage)
        self.configImage.widthAnchor.constraint(equalToConstant: 29).isActive = true
        self.configImage.heightAnchor.constraint(equalToConstant: 29).isActive = true
        self.configImage.centerYAnchor.constraint(equalTo: self.stackControl.centerYAnchor).isActive = true
        self.configImageLeadingConstraint = self.configImage.leadingAnchor.constraint(equalTo: self.profileImage.trailingAnchor, constant: view.frame.width * 0.33368)

        activateConstraints()
    }
    
    private func activateConstraints() {
        self.configImageLeadingConstraint!.isActive = true
        self.profileImageTrailingConstraint!.isActive = true
        self.homeImageCenterXConstraint!.isActive = true
    }
    
    /**
     Switches the colors of the profile image and the home image if necessary
     - Parameters:
        - index: The current page index
     */
    func switchHeaderImagesColorsToIndex(index: Int) {
        if(index == 0){
            UIView.animate(withDuration: 0.2) {
                self.homeImage.tintColor = AppColors.clearblack.color
                self.profileImage.tintColor = AppColors.gray.color
            }
            
        }else {
            UIView.animate(withDuration: 0.2) {
                self.homeImage.tintColor = AppColors.gray.color
                self.profileImage.tintColor = AppColors.clearblack.color
            }
        }
    }
    
    @objc private func leftButtonAction(_ sender: Any) {
        scrollToMenuIndex(index: 0)
        self.pageIndex = 0
        switchHeaderImagesColorsToIndex(index: 0)
    }
    
    
    @objc private func middleAction(_ sender: Any) {
        
    }
    
    
    @objc private func rightAction(_ sender: Any) {
        if(pageIndex == 1) {
            
        }else {
            scrollToMenuIndex(index: 1)
            self.pageIndex = 1
            switchHeaderImagesColorsToIndex(index: 1)
        }
    }
    
 }
 
 extension HomeViewController: UICollectionViewDelegate, UICollectionViewDataSource,UICollectionViewDelegateFlowLayout {
    
    // MARK: - Collectionview configuration
    
    func setupCollectionView() {
        self.view.addSubview(self.containerCollectionView)
        self.containerCollectionView.delegate = self
        self.containerCollectionView.dataSource = self
        NSLayoutConstraint.activate([
                self.containerCollectionView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor),
                self.containerCollectionView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor),
                self.containerCollectionView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor),
                self.containerCollectionView.topAnchor.constraint(equalTo: self.stackControl.bottomAnchor)
            ])
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 2
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if(indexPath.item == 0){
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: mainScreenCellId, for: indexPath) as! MainScreenView
            cell.navigationController = self.navigationController
            return cell
        }else {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: profileScreenCellId, for: indexPath) as! ProfileView
            cell.homeInteractionDelegate = self
            cell.navigationController = self.navigationController
            return cell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: containerCollectionView.frame.width, height: containerCollectionView.frame.height)
    }
    
//    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
//        return UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
//    }
    
    
    // MARK: - CollectionView ScrollView
    
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        //If last offset was smaller than the current one, move items to the right, else move to left.
        let differenceOffsetX = scrollView.contentOffset.x - lastOffset
        updateImagesCenterX(xDistance: -(differenceOffsetX * moveFactor))
        updateImagesScale(xDistance: differenceOffsetX)
        lastOffset = scrollView.contentOffset.x
    }
    
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        self.pageIndex = Int(scrollView.contentOffset.x/view.frame.width)
        switchHeaderImagesColorsToIndex(index: self.pageIndex)
    }
    
    
    /**
     Scrolls the container collection view to a specific page
     - Parameters:
        - index: The desired page to be scrolled.
     */
    func scrollToMenuIndex(index: Int){
        let indexPath = IndexPath(item: index, section: 0)
        self.containerCollectionView.scrollToItem(at: indexPath, at: .centeredHorizontally, animated: true)
    }
    
    
    // MARK: - Scroll Animations
    
    /**
     Updates the images scale as the scrolling happens based on each image scaleFactor
     - Parameters:
        - xDistance: The scroll offset variation
     
     - Attention: In this case we're using the scrolling distance to scale the items.
     */
    func updateImagesScale(xDistance: CGFloat) {
        self.profileImageScale.width += (profileImageScaleFactor.width * xDistance)
        self.profileImageScale.height += (profileImageScaleFactor.height * xDistance)
        self.homeImageScale.width += (homeImageScaleFactor.width * xDistance)
        self.homeImageScale.height += (homeImageScaleFactor.height * xDistance)
        self.profileImage.transform = CGAffineTransform(scaleX: self.profileImageScale.width, y: self.profileImageScale.height)
        self.homeImage.transform = CGAffineTransform(scaleX: self.homeImageScale.width, y: self.homeImageScale.height)
        self.view.layoutIfNeeded()
    }
    
    
    /**
     Changes the images center x with a value to be incremented or decremented.
     - Parameters:
     - xDistance: The distance value to be applied to the images center.
     */
    func updateImagesCenterX(xDistance: CGFloat){
        self.profileImageTrailingConstraint?.constant += xDistance
        self.homeImageCenterXConstraint?.constant += xDistance
        self.homeImage.setNeedsLayout()
        self.homeImage.layoutIfNeeded()
        self.homeImage.setNeedsUpdateConstraints()
        self.homeImage.updateConstraints()
    }
    
    /**
     Gets the scale rate of the item based on it's final size and the distance in which it should vary.
     - Parameters:
     - distance: The amount of distance left until the item destination.
     - initialSize: The item initial size
     - finalSize: The item final size at the end of the movement
     - Attention: In this case we should use the screen width, because we're moving the entire screen to resize the items.
     */
    func getItemScaleRate(distance: CGFloat, from initialSize: CGSize, to finalSize: CGSize) -> CGSize{
        
        //First we get the width and height difference from the initial state to the final
        let widthDifference = finalSize.width - initialSize.width
        let heightDifference = finalSize.height - initialSize.height
        
        if((widthDifference == 0 && heightDifference == 0) || distance == 0) {
            return CGSize(width: 0, height: 0)
        }
        
        //Then we store the percentage of growth of the frame from the beginning
        let widthGrowthPercentage = widthDifference/initialSize.width
        let heightGrowthPercentage = heightDifference/initialSize.height
        
        /*
         If the frame grew n% we just need to update the scale based on how much it should grow by each point moved.
         */
        let growthScalePercentagePerPoint = CGSize(width: widthGrowthPercentage/distance, height: heightGrowthPercentage/distance)
        
        return growthScalePercentagePerPoint
    }
 }

 extension HomeViewController: HomeVCInteraction {
    func scrollToIndex(index: Int) {
        containerCollectionView.collectionViewLayout.invalidateLayout()
        let indexPath = IndexPath(item: index, section: 0)
        DispatchQueue.main.async {
            self.containerCollectionView.scrollToItem(at: indexPath, at: .centeredHorizontally, animated: false)
        }
    }
    
    func hideStatusBar() {
        shouldHideStatusBar = true
        UIView.animate(withDuration: 0.25, animations: {
            self.setNeedsStatusBarAppearanceUpdate()
        }) { (complete) in
            self.containerCollectionView.setNeedsLayout()
            self.containerCollectionView.layoutIfNeeded()
        }
    }
    
    func showStatusBar() {
        shouldHideStatusBar = false
        UIView.animate(withDuration: 0.25, animations: {
            self.setNeedsStatusBarAppearanceUpdate()
        }) { (complete) in
            self.containerCollectionView.setNeedsLayout()
            self.containerCollectionView.layoutIfNeeded()
        }
    }
    
    func rotateToPortrait() {
        let value = UIInterfaceOrientation.portrait.rawValue
        UIDevice.current.setValue(value, forKey: "orientation")
    }
 }
